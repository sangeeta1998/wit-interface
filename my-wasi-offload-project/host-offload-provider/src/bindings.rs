// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod wasi_custom {
        pub mod host_offload {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod host_allocator {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Handle = u32;
                #[derive(Clone)]
                pub enum HostError {
                    InvalidHandle,
                    AllocationFailed,
                    CopyOutOfBounds,
                    ComputationError(_rt::String),
                    DimensionMismatch,
                    Other(_rt::String),
                }
                impl ::core::fmt::Debug for HostError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            HostError::InvalidHandle => {
                                f.debug_tuple("HostError::InvalidHandle").finish()
                            }
                            HostError::AllocationFailed => {
                                f.debug_tuple("HostError::AllocationFailed").finish()
                            }
                            HostError::CopyOutOfBounds => {
                                f.debug_tuple("HostError::CopyOutOfBounds").finish()
                            }
                            HostError::ComputationError(e) => {
                                f.debug_tuple("HostError::ComputationError")
                                    .field(e)
                                    .finish()
                            }
                            HostError::DimensionMismatch => {
                                f.debug_tuple("HostError::DimensionMismatch").finish()
                            }
                            HostError::Other(e) => {
                                f.debug_tuple("HostError::Other").field(e).finish()
                            }
                        }
                    }
                }
                impl ::core::fmt::Display for HostError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }
                impl std::error::Error for HostError {}
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct MatrixDimensions {
                    pub rows: u32,
                    pub cols: u32,
                }
                impl ::core::fmt::Debug for MatrixDimensions {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("MatrixDimensions")
                            .field("rows", &self.rows)
                            .field("cols", &self.cols)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_allocate_buffer_cabi<T: Guest>(
                    arg0: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::allocate_buffer(arg0 as u64);
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(e);
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                HostError::InvalidHandle => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                HostError::AllocationFailed => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                HostError::CopyOutOfBounds => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                HostError::ComputationError(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec2 = (e.into_bytes()).into_boxed_slice();
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    ::core::mem::forget(vec2);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len2;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr2.cast_mut();
                                }
                                HostError::DimensionMismatch => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                HostError::Other(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr3.cast_mut();
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_allocate_buffer<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                1 => {}
                                2 => {}
                                3 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                4 => {}
                                _ => {
                                    let l4 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_free_buffer_cabi<T: Guest>(arg0: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::free_buffer(arg0 as u32);
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                HostError::InvalidHandle => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                HostError::AllocationFailed => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                HostError::CopyOutOfBounds => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                HostError::ComputationError(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec2 = (e.into_bytes()).into_boxed_slice();
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    ::core::mem::forget(vec2);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len2;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr2.cast_mut();
                                }
                                HostError::DimensionMismatch => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                HostError::Other(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr3.cast_mut();
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_free_buffer<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                1 => {}
                                2 => {}
                                3 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                4 => {}
                                _ => {
                                    let l4 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_write_to_host_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i32,
                    arg3: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let result1 = T::write_to_host(
                        _rt::Vec::from_raw_parts(arg0.cast(), len0, len0),
                        arg2 as u32,
                        arg3 as u64,
                    );
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                HostError::InvalidHandle => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                HostError::AllocationFailed => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                HostError::CopyOutOfBounds => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                HostError::ComputationError(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr3.cast_mut();
                                }
                                HostError::DimensionMismatch => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                HostError::Other(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_write_to_host<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                1 => {}
                                2 => {}
                                3 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                4 => {}
                                _ => {
                                    let l4 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_read_from_host_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i64,
                    arg2: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::read_from_host(
                        arg0 as u32,
                        arg1 as u64,
                        arg2 as u64,
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let vec2 = (e).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *ptr1
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len2;
                            *ptr1
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr2.cast_mut();
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                HostError::InvalidHandle => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                HostError::AllocationFailed => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                HostError::CopyOutOfBounds => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                HostError::ComputationError(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr3.cast_mut();
                                }
                                HostError::DimensionMismatch => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                HostError::Other(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_read_from_host<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base3 = l1;
                            let len3 = l2;
                            _rt::cabi_dealloc(base3, len3 * 1, 1);
                        }
                        _ => {
                            let l4 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l4 {
                                0 => {}
                                1 => {}
                                2 => {}
                                3 => {
                                    let l5 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l6 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                }
                                4 => {}
                                _ => {
                                    let l7 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l8 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_register_matrix_dimensions_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                    arg2: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::register_matrix_dimensions(
                        arg0 as u32,
                        MatrixDimensions {
                            rows: arg1 as u32,
                            cols: arg2 as u32,
                        },
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                HostError::InvalidHandle => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                HostError::AllocationFailed => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                HostError::CopyOutOfBounds => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                HostError::ComputationError(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec2 = (e.into_bytes()).into_boxed_slice();
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    ::core::mem::forget(vec2);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len2;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr2.cast_mut();
                                }
                                HostError::DimensionMismatch => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                HostError::Other(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr3.cast_mut();
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_register_matrix_dimensions<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                1 => {}
                                2 => {}
                                3 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                4 => {}
                                _ => {
                                    let l4 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_matrix_multiply_f32_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::matrix_multiply_f32(arg0 as u32, arg1 as u32);
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(e);
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                HostError::InvalidHandle => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                HostError::AllocationFailed => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                HostError::CopyOutOfBounds => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                HostError::ComputationError(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec2 = (e.into_bytes()).into_boxed_slice();
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    ::core::mem::forget(vec2);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len2;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr2.cast_mut();
                                }
                                HostError::DimensionMismatch => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                HostError::Other(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr3.cast_mut();
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_matrix_multiply_f32<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                1 => {}
                                2 => {}
                                3 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                4 => {}
                                _ => {
                                    let l4 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_matrix_dimensions_cabi<T: Guest>(
                    arg0: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_matrix_dimensions(arg0 as u32);
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let MatrixDimensions { rows: rows2, cols: cols2 } = e;
                            *ptr1
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(rows2);
                            *ptr1
                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(cols2);
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                HostError::InvalidHandle => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                HostError::AllocationFailed => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                HostError::CopyOutOfBounds => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                HostError::ComputationError(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr3.cast_mut();
                                }
                                HostError::DimensionMismatch => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                }
                                HostError::Other(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_matrix_dimensions<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                1 => {}
                                2 => {}
                                3 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                4 => {}
                                _ => {
                                    let l4 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    fn allocate_buffer(size: u64) -> Result<Handle, HostError>;
                    fn free_buffer(h: Handle) -> Result<(), HostError>;
                    fn write_to_host(
                        guest_bytes: _rt::Vec<u8>,
                        target_handle: Handle,
                        target_offset: u64,
                    ) -> Result<(), HostError>;
                    fn read_from_host(
                        source_handle: Handle,
                        source_offset: u64,
                        len: u64,
                    ) -> Result<_rt::Vec<u8>, HostError>;
                    /// We need a way to associate dimensions with a handle when it's created or written to.
                    /// Let's add an explicit function for the provider to register dimensions
                    /// after data is written, or make allocate_buffer more specific if it's for matrices.
                    /// For now, let's add `register-matrix-dimensions`
                    fn register_matrix_dimensions(
                        h: Handle,
                        dims: MatrixDimensions,
                    ) -> Result<(), HostError>;
                    fn matrix_multiply_f32(
                        handle_a: Handle,
                        handle_b: Handle,
                    ) -> Result<Handle, HostError>;
                    fn get_matrix_dimensions(
                        h: Handle,
                    ) -> Result<MatrixDimensions, HostError>;
                }
                #[doc(hidden)]
                macro_rules! __export_wasi_custom_host_offload_host_allocator_0_1_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "wasi-custom:host-offload/host-allocator@0.1.0#allocate-buffer")]
                        unsafe extern "C" fn export_allocate_buffer(arg0 : i64,) -> * mut
                        u8 { unsafe { $($path_to_types)*::
                        _export_allocate_buffer_cabi::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "cabi_post_wasi-custom:host-offload/host-allocator@0.1.0#allocate-buffer")]
                        unsafe extern "C" fn _post_return_allocate_buffer(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_allocate_buffer::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "wasi-custom:host-offload/host-allocator@0.1.0#free-buffer")]
                        unsafe extern "C" fn export_free_buffer(arg0 : i32,) -> * mut u8
                        { unsafe { $($path_to_types)*:: _export_free_buffer_cabi::<$ty >
                        (arg0) } } #[unsafe (export_name =
                        "cabi_post_wasi-custom:host-offload/host-allocator@0.1.0#free-buffer")]
                        unsafe extern "C" fn _post_return_free_buffer(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_free_buffer::<$ty >
                        (arg0) } } #[unsafe (export_name =
                        "wasi-custom:host-offload/host-allocator@0.1.0#write-to-host")]
                        unsafe extern "C" fn export_write_to_host(arg0 : * mut u8, arg1 :
                        usize, arg2 : i32, arg3 : i64,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_write_to_host_cabi::<$ty > (arg0,
                        arg1, arg2, arg3) } } #[unsafe (export_name =
                        "cabi_post_wasi-custom:host-offload/host-allocator@0.1.0#write-to-host")]
                        unsafe extern "C" fn _post_return_write_to_host(arg0 : * mut u8,)
                        { unsafe { $($path_to_types)*:: __post_return_write_to_host::<$ty
                        > (arg0) } } #[unsafe (export_name =
                        "wasi-custom:host-offload/host-allocator@0.1.0#read-from-host")]
                        unsafe extern "C" fn export_read_from_host(arg0 : i32, arg1 :
                        i64, arg2 : i64,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_read_from_host_cabi::<$ty > (arg0, arg1, arg2) } }
                        #[unsafe (export_name =
                        "cabi_post_wasi-custom:host-offload/host-allocator@0.1.0#read-from-host")]
                        unsafe extern "C" fn _post_return_read_from_host(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_read_from_host::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "wasi-custom:host-offload/host-allocator@0.1.0#register-matrix-dimensions")]
                        unsafe extern "C" fn export_register_matrix_dimensions(arg0 :
                        i32, arg1 : i32, arg2 : i32,) -> * mut u8 { unsafe {
                        $($path_to_types)*::
                        _export_register_matrix_dimensions_cabi::<$ty > (arg0, arg1,
                        arg2) } } #[unsafe (export_name =
                        "cabi_post_wasi-custom:host-offload/host-allocator@0.1.0#register-matrix-dimensions")]
                        unsafe extern "C" fn _post_return_register_matrix_dimensions(arg0
                        : * mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_register_matrix_dimensions::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "wasi-custom:host-offload/host-allocator@0.1.0#matrix-multiply-f32")]
                        unsafe extern "C" fn export_matrix_multiply_f32(arg0 : i32, arg1
                        : i32,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_matrix_multiply_f32_cabi::<$ty > (arg0, arg1) } }
                        #[unsafe (export_name =
                        "cabi_post_wasi-custom:host-offload/host-allocator@0.1.0#matrix-multiply-f32")]
                        unsafe extern "C" fn _post_return_matrix_multiply_f32(arg0 : *
                        mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_matrix_multiply_f32::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "wasi-custom:host-offload/host-allocator@0.1.0#get-matrix-dimensions")]
                        unsafe extern "C" fn export_get_matrix_dimensions(arg0 : i32,) ->
                        * mut u8 { unsafe { $($path_to_types)*::
                        _export_get_matrix_dimensions_cabi::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "cabi_post_wasi-custom:host-offload/host-allocator@0.1.0#get-matrix-dimensions")]
                        unsafe extern "C" fn _post_return_get_matrix_dimensions(arg0 : *
                        mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_get_matrix_dimensions::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wasi_custom_host_offload_host_allocator_0_1_0_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 4 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 4
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub use alloc_crate::vec::Vec;
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_provider_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::wasi_custom::host_offload::host_allocator::__export_wasi_custom_host_offload_host_allocator_0_1_0_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::wasi_custom::host_offload::host_allocator);
    };
}
#[doc(inline)]
pub(crate) use __export_provider_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:wasi-custom:host-offload@0.1.0:provider:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 744] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xe9\x04\x01A\x02\x01\
A\x02\x01B\x19\x01y\x04\0\x06handle\x03\0\0\x01q\x06\x0einvalid-handle\0\0\x11al\
location-failed\0\0\x12copy-out-of-bounds\0\0\x11computation-error\x01s\0\x12dim\
ension-mismatch\0\0\x05other\x01s\0\x04\0\x0ahost-error\x03\0\x02\x01r\x02\x04ro\
wsy\x04colsy\x04\0\x11matrix-dimensions\x03\0\x04\x01j\x01\x01\x01\x03\x01@\x01\x04\
sizew\0\x06\x04\0\x0fallocate-buffer\x01\x07\x01j\0\x01\x03\x01@\x01\x01h\x01\0\x08\
\x04\0\x0bfree-buffer\x01\x09\x01p}\x01@\x03\x0bguest-bytes\x0a\x0dtarget-handle\
\x01\x0dtarget-offsetw\0\x08\x04\0\x0dwrite-to-host\x01\x0b\x01j\x01\x0a\x01\x03\
\x01@\x03\x0dsource-handle\x01\x0dsource-offsetw\x03lenw\0\x0c\x04\0\x0eread-fro\
m-host\x01\x0d\x01@\x02\x01h\x01\x04dims\x05\0\x08\x04\0\x1aregister-matrix-dime\
nsions\x01\x0e\x01@\x02\x08handle-a\x01\x08handle-b\x01\0\x06\x04\0\x13matrix-mu\
ltiply-f32\x01\x0f\x01j\x01\x05\x01\x03\x01@\x01\x01h\x01\0\x10\x04\0\x15get-mat\
rix-dimensions\x01\x11\x04\0-wasi-custom:host-offload/host-allocator@0.1.0\x05\0\
\x04\0'wasi-custom:host-offload/provider@0.1.0\x04\0\x0b\x0e\x01\0\x08provider\x03\
\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-\
bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
