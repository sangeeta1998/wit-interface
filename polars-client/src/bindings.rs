// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_run_dataframe_example_cabi<T: Guest>() -> *mut u8 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::run_dataframe_example();
    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
    match result0 {
        Ok(_) => {
            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
        }
        Err(e) => {
            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
            let vec2 = (e.into_bytes()).into_boxed_slice();
            let ptr2 = vec2.as_ptr().cast::<u8>();
            let len2 = vec2.len();
            ::core::mem::forget(vec2);
            *ptr1.add(2 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
            *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr2
                .cast_mut();
        }
    };
    ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_run_dataframe_example<T: Guest>(arg0: *mut u8) {
    let l0 = i32::from(*arg0.add(0).cast::<u8>());
    match l0 {
        0 => {}
        _ => {
            let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
            let l2 = *arg0.add(2 * ::core::mem::size_of::<*const u8>()).cast::<usize>();
            _rt::cabi_dealloc(l1, l2, 1);
        }
    }
}
pub trait Guest {
    fn run_dataframe_example() -> Result<(), _rt::String>;
}
#[doc(hidden)]
macro_rules! __export_world_client_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[unsafe (export_name = "run-dataframe-example")] unsafe extern
        "C" fn export_run_dataframe_example() -> * mut u8 { unsafe { $($path_to_types)*::
        _export_run_dataframe_example_cabi::<$ty > () } } #[unsafe (export_name =
        "cabi_post_run-dataframe-example")] unsafe extern "C" fn
        _post_return_run_dataframe_example(arg0 : * mut u8,) { unsafe {
        $($path_to_types)*:: __post_return_run_dataframe_example::<$ty > (arg0) } } };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_client_cabi;
#[cfg_attr(target_pointer_width = "64", repr(align(8)))]
#[cfg_attr(target_pointer_width = "32", repr(align(4)))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 3 * ::core::mem::size_of::<*const u8>()]);
static mut _RET_AREA: _RetArea = _RetArea(
    [::core::mem::MaybeUninit::uninit(); 3 * ::core::mem::size_of::<*const u8>()],
);
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasi {
    pub mod dataframe {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod dataframe_analysis {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Opaque handle to a dataframe/lazyframe on the host
            pub type Dataframe = u32;
            /// Comparators for filters
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum Comparator {
                Gt,
                Gte,
                Lt,
                Lte,
                Eq,
                Neq,
            }
            impl ::core::fmt::Debug for Comparator {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Comparator::Gt => f.debug_tuple("Comparator::Gt").finish(),
                        Comparator::Gte => f.debug_tuple("Comparator::Gte").finish(),
                        Comparator::Lt => f.debug_tuple("Comparator::Lt").finish(),
                        Comparator::Lte => f.debug_tuple("Comparator::Lte").finish(),
                        Comparator::Eq => f.debug_tuple("Comparator::Eq").finish(),
                        Comparator::Neq => f.debug_tuple("Comparator::Neq").finish(),
                    }
                }
            }
            impl Comparator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Comparator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => Comparator::Gt,
                        1 => Comparator::Gte,
                        2 => Comparator::Lt,
                        3 => Comparator::Lte,
                        4 => Comparator::Eq,
                        5 => Comparator::Neq,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Simple scalar values used in filters
            #[derive(Clone)]
            pub enum Scalar {
                Logic(bool),
                Name(_rt::String),
                Value(f64),
            }
            impl ::core::fmt::Debug for Scalar {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Scalar::Logic(e) => {
                            f.debug_tuple("Scalar::Logic").field(e).finish()
                        }
                        Scalar::Name(e) => {
                            f.debug_tuple("Scalar::Name").field(e).finish()
                        }
                        Scalar::Value(e) => {
                            f.debug_tuple("Scalar::Value").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct ColumnFilter {
                pub column: _rt::String,
                pub op: Comparator,
                pub value: Scalar,
            }
            impl ::core::fmt::Debug for ColumnFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ColumnFilter")
                        .field("column", &self.column)
                        .field("op", &self.op)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Aggregation functions
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum Aggregation {
                Count,
                Mean,
            }
            impl ::core::fmt::Debug for Aggregation {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Aggregation::Count => {
                            f.debug_tuple("Aggregation::Count").finish()
                        }
                        Aggregation::Mean => f.debug_tuple("Aggregation::Mean").finish(),
                    }
                }
            }
            impl Aggregation {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Aggregation {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => Aggregation::Count,
                        1 => Aggregation::Mean,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// --- The API ---
            pub fn load_csv(path: &str) -> Result<Dataframe, ()> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec0 = path;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "wasi:dataframe/dataframe-analysis@0.2.0-draft"
                    )]
                    unsafe extern "C" {
                        #[link_name = "load-csv"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result5 = match l3 {
                        0 => {
                            let e = {
                                let l4 = *ptr1.add(4).cast::<i32>();
                                l4 as u32
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = ();
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result5
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn from_rows(
                columns: &[_rt::String],
                rows: &[_rt::Vec<_rt::String>],
            ) -> Result<Dataframe, ()> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec1 = columns;
                    let len1 = vec1.len();
                    let layout1 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec1.len() * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result1 = if layout1.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout1).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout1);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec1.into_iter().enumerate() {
                        let base = result1
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let vec0 = e;
                            let ptr0 = vec0.as_ptr().cast::<u8>();
                            let len0 = vec0.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len0;
                            *base.add(0).cast::<*mut u8>() = ptr0.cast_mut();
                        }
                    }
                    let vec4 = rows;
                    let len4 = vec4.len();
                    let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec4.len() * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result4 = if layout4.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout4);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec4.into_iter().enumerate() {
                        let base = result4
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let vec3 = e;
                            let len3 = vec3.len();
                            let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec3.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result3 = if layout3.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout3);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec3.into_iter().enumerate() {
                                let base = result3
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let vec2 = e;
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len2;
                                    *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                                }
                            }
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = result3;
                            cleanup_list.extend_from_slice(&[(result3, layout3)]);
                        }
                    }
                    let ptr5 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "wasi:dataframe/dataframe-analysis@0.2.0-draft"
                    )]
                    unsafe extern "C" {
                        #[link_name = "from-rows"]
                        fn wit_import6(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import6(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import6(result1, len1, result4, len4, ptr5) };
                    let l7 = i32::from(*ptr5.add(0).cast::<u8>());
                    let result9 = match l7 {
                        0 => {
                            let e = {
                                let l8 = *ptr5.add(4).cast::<i32>();
                                l8 as u32
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = ();
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout1.size() != 0 {
                        _rt::alloc::dealloc(result1.cast(), layout1);
                    }
                    if layout4.size() != 0 {
                        _rt::alloc::dealloc(result4.cast(), layout4);
                    }
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result9
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn filter(
                df: Dataframe,
                filters: &[ColumnFilter],
            ) -> Result<Dataframe, ()> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec3 = filters;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec3.len() * (16 + 4 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3
                            .add(i * (16 + 4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let ColumnFilter {
                                column: column0,
                                op: op0,
                                value: value0,
                            } = e;
                            let vec1 = column0;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len1;
                            *base.add(0).cast::<*mut u8>() = ptr1.cast_mut();
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (op0.clone() as i32) as u8;
                            match value0 {
                                Scalar::Logic(e) => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                Scalar::Name(e) => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec2 = e;
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    *base
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len2;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr2.cast_mut();
                                }
                                Scalar::Value(e) => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f64>() = _rt::as_f64(e);
                                }
                            }
                        }
                    }
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "wasi:dataframe/dataframe-analysis@0.2.0-draft"
                    )]
                    unsafe extern "C" {
                        #[link_name = "filter"]
                        fn wit_import5(_: i32, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import5(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import5(_rt::as_i32(df), result3, len3, ptr4) };
                    let l6 = i32::from(*ptr4.add(0).cast::<u8>());
                    let result8 = match l6 {
                        0 => {
                            let e = {
                                let l7 = *ptr4.add(4).cast::<i32>();
                                l7 as u32
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = ();
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout3.size() != 0 {
                        _rt::alloc::dealloc(result3.cast(), layout3);
                    }
                    result8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn group_by(
                df: Dataframe,
                by_columns: &[_rt::String],
            ) -> Result<Dataframe, ()> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec1 = by_columns;
                    let len1 = vec1.len();
                    let layout1 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec1.len() * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result1 = if layout1.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout1).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout1);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec1.into_iter().enumerate() {
                        let base = result1
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let vec0 = e;
                            let ptr0 = vec0.as_ptr().cast::<u8>();
                            let len0 = vec0.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len0;
                            *base.add(0).cast::<*mut u8>() = ptr0.cast_mut();
                        }
                    }
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "wasi:dataframe/dataframe-analysis@0.2.0-draft"
                    )]
                    unsafe extern "C" {
                        #[link_name = "group-by"]
                        fn wit_import3(_: i32, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import3(_rt::as_i32(df), result1, len1, ptr2) };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result6 = match l4 {
                        0 => {
                            let e = {
                                let l5 = *ptr2.add(4).cast::<i32>();
                                l5 as u32
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = ();
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout1.size() != 0 {
                        _rt::alloc::dealloc(result1.cast(), layout1);
                    }
                    result6
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn aggregate(
                df: Dataframe,
                aggs: &[Aggregation],
            ) -> Result<Dataframe, ()> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec0 = aggs;
                    let len0 = vec0.len();
                    let layout0 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec0.len() * 1,
                        1,
                    );
                    let result0 = if layout0.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout0);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec0.into_iter().enumerate() {
                        let base = result0.add(i * 1);
                        {
                            *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    }
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "wasi:dataframe/dataframe-analysis@0.2.0-draft"
                    )]
                    unsafe extern "C" {
                        #[link_name = "aggregate"]
                        fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import2(_rt::as_i32(df), result0, len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result5 = match l3 {
                        0 => {
                            let e = {
                                let l4 = *ptr1.add(4).cast::<i32>();
                                l4 as u32
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = ();
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout0.size() != 0 {
                        _rt::alloc::dealloc(result0.cast(), layout0);
                    }
                    result5
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn to_json(df: Dataframe) -> Result<_rt::String, ()> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "wasi:dataframe/dataframe-analysis@0.2.0-draft"
                    )]
                    unsafe extern "C" {
                        #[link_name = "to-json"]
                        fn wit_import1(_: i32, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(_rt::as_i32(df), ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result6 = match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr0
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l4 = *ptr0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                _rt::string_lift(bytes5)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = ();
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result6
                }
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::alloc;
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_client_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_client_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_client_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:my-org:dataframe-world@0.1.0:client:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 623] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xf2\x03\x01A\x02\x01\
A\x05\x01B\x1c\x01y\x04\0\x09dataframe\x03\0\0\x01m\x06\x02gt\x03gte\x02lt\x03lt\
e\x02eq\x03neq\x04\0\x0acomparator\x03\0\x02\x01q\x03\x05logic\x01\x7f\0\x04name\
\x01s\0\x05value\x01u\0\x04\0\x06scalar\x03\0\x04\x01r\x03\x06columns\x02op\x03\x05\
value\x05\x04\0\x0dcolumn-filter\x03\0\x06\x01m\x02\x05count\x04mean\x04\0\x0bag\
gregation\x03\0\x08\x01j\x01\x01\0\x01@\x01\x04paths\0\x0a\x04\0\x08load-csv\x01\
\x0b\x01ps\x01p\x0c\x01@\x02\x07columns\x0c\x04rows\x0d\0\x0a\x04\0\x09from-rows\
\x01\x0e\x01p\x07\x01@\x02\x02df\x01\x07filters\x0f\0\x0a\x04\0\x06filter\x01\x10\
\x01@\x02\x02df\x01\x0aby-columns\x0c\0\x0a\x04\0\x08group-by\x01\x11\x01p\x09\x01\
@\x02\x02df\x01\x04aggs\x12\0\x0a\x04\0\x09aggregate\x01\x13\x01j\x01s\0\x01@\x01\
\x02df\x01\0\x14\x04\0\x07to-json\x01\x15\x03\0-wasi:dataframe/dataframe-analysi\
s@0.2.0-draft\x05\0\x01j\0\x01s\x01@\0\0\x01\x04\0\x15run-dataframe-example\x01\x02\
\x04\0#my-org:dataframe-world/client@0.1.0\x04\0\x0b\x0c\x01\0\x06client\x03\0\0\
\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bind\
gen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
